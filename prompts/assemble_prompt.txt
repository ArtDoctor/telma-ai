You are to assist in creating conversation flows by outputting a list of nodes that will follow after one another
Here are the types of nodes, each with their respective description: 
"Prompt", Tell the customer a message without expecting an answer. e.g. greeting, inform about new discounts 
"OpenQuestion", Ask the customer an open ended question. e.g. How many people will be at the restaurant?
"YesNoConfirmation" Ask the customer a yes/no question. e.g. Have you visited us before?
"NumericRatingModule", Asks the customer to rate out of a range of values. e.g. Rate how good our service was from 1-5. 
"SMSModule", Sends an SMS message to the customer's phone. e.g. Thank you for contacting us. How was our service?

To further understand the nature of each node with its parameters please see the description below.
Here's the output schema for each node: 
{
  "Prompt": {
    "prompt": "" // prompt is a string. It will be read to the customer, serves to deliver information without requiring an answer. Examples: "I am calling to inform you about you car's extended warranty", "Hello, this is sillybot from dumbcompany inc. im calling to ask you questions about our services"
  },"YesNoConfirmation": {
    "question": "", // question is a string, that will be a question for the customer by the bot that has only yes/no answers. Examples: "Do you like our recent app update?", "Have you heard of our company before?"
    "prompt_yes_acknowledgment": "", // prompt_yes_acknowledgment is a string. What the bot will say if the customer answers yes to the preceding question. Examples: "Great. I'm glad to hear that!", "Okay, noted.", "Terrific, let us move on"
    "prompt_no_acknowledgment": "", // prompt_no_acknowledgment is a string.  What the bot will say if the customer answers no to the preceding question. Examples: "I'm sorry to hear that", "Okay, noted.", "Very well, let us move on"
    "yes_alternatives": [], // yes_alternatives is an array of strings. This array contains all the possible variations of saying yes in this context. Only come up with cca 5 alternatives. Examples: ["For sure", "bet", "yeah I'm free", "No problem", "Sure", "Yes"]
    "no_alternatives": [] // no_alternatives is an array of strings. yes_alternatives is an array of strings. This array contains all the possible variations of saying yes in this context. Only come up with cca 5 alternatives. Examples: ["I'm good", "No", "Nah", "I'm busy right now", "Not really"],
    "node_exit": "end" or int //Is either the string "end" or an int. This defines what node should be next if the customer gives a positive answer to the preceding question. Use "end" if the conversation should end immediately. Otherwise use the number of a node that logically follows a positive answer to the preceding question. Usually that will be the next node in the numbered list "on_no": //Is either the string "end" or an int. This defines what node should be next if the customer gives a negative answer to the preceding question. Use "end" if the conversation should end immediately or output the number of the connecting node in the list. Oftentimes you'll want to connect this to the node saying goodbye or create a node saying bye specifically when a customer declines so just output that number.
  },
  "OpenQuestion": {
    "question": "", // question is a string, that will be a question for the customer by the bot that has more than yes/no answers. Here are some examples:  "What do you think about quality control at the airport?" "How many people will the reservation be for?"
    "acknowledgment_prompt": "" // acknowledgment_prompt is a string, that will be said by the bot when the customer answers the OpenQuestion to acnkowledge the input. 
  },
  "SMSModule": {
    "prompt": "" // prompt is a string that will be sent as an sms message to the customer's phone. Examples: "Thank you for calling with us", "How was the experience?"
  },
}
The output will be a numbered list of node types in first-to-last order like the one shown below, with a description of what each node is supposed to do.
Sample output for prompt "Pizza hut reservation bot" would be:
1. Prompt //Greet the customer and tell them they called into Pizza hut
2. OpenQuestion //Ask about when the customer wishes to reserve a table for
2. OpenQuestion //Ask how many people will be at the table
3. Prompt //Thank the customer for making a reservation and say goodbye
